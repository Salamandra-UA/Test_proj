//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/HeroInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HeroInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HeroInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HeroInput"",
    ""maps"": [
        {
            ""name"": ""HeroMap"",
            ""id"": ""1be90019-c89a-47e7-a342-79d010d43847"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f8aeb273-c6a3-4fdc-9c5e-af543571aaaf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TellSomething"",
                    ""type"": ""Button"",
                    ""id"": ""85fe7bfb-5235-490f-ac6e-cb0e38e83a32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c15ef924-0025-484e-a310-e195c41f0fae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector by Keybord"",
                    ""id"": ""0338647d-4883-4ffe-88b6-818e9d03c493"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""97bb3fe4-979b-4a11-a4a2-2d3388453825"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""7ed70f3d-cf56-483c-bf01-a7d10d5e4fb1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""80ca5b85-be19-4122-a3af-b12c92d3fcd7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""ebbd1f61-eccc-45df-9712-482f38bc21e9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector by Arrows"",
                    ""id"": ""c056517a-414b-415e-b819-56cbacf5f5c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""69bbe848-d414-4973-8972-4e89e8359aaa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""05196fdc-d483-448c-bdb4-2f1ac6cbd357"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d6ac0b95-3d5c-4c5d-abbe-c413375179fe"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5d3d9459-6c43-4e05-93d2-110bb9572f7c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0cf731eb-62d8-4ad1-a663-c31ba0ee2dd8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TellSomething"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ffc7769-7e88-478e-9936-cc3adbe4e6ed"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HeroMap
        m_HeroMap = asset.FindActionMap("HeroMap", throwIfNotFound: true);
        m_HeroMap_Movement = m_HeroMap.FindAction("Movement", throwIfNotFound: true);
        m_HeroMap_TellSomething = m_HeroMap.FindAction("TellSomething", throwIfNotFound: true);
        m_HeroMap_Interact = m_HeroMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HeroMap
    private readonly InputActionMap m_HeroMap;
    private List<IHeroMapActions> m_HeroMapActionsCallbackInterfaces = new List<IHeroMapActions>();
    private readonly InputAction m_HeroMap_Movement;
    private readonly InputAction m_HeroMap_TellSomething;
    private readonly InputAction m_HeroMap_Interact;
    public struct HeroMapActions
    {
        private @HeroInput m_Wrapper;
        public HeroMapActions(@HeroInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_HeroMap_Movement;
        public InputAction @TellSomething => m_Wrapper.m_HeroMap_TellSomething;
        public InputAction @Interact => m_Wrapper.m_HeroMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_HeroMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeroMapActions set) { return set.Get(); }
        public void AddCallbacks(IHeroMapActions instance)
        {
            if (instance == null || m_Wrapper.m_HeroMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeroMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @TellSomething.started += instance.OnTellSomething;
            @TellSomething.performed += instance.OnTellSomething;
            @TellSomething.canceled += instance.OnTellSomething;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IHeroMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @TellSomething.started -= instance.OnTellSomething;
            @TellSomething.performed -= instance.OnTellSomething;
            @TellSomething.canceled -= instance.OnTellSomething;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IHeroMapActions instance)
        {
            if (m_Wrapper.m_HeroMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeroMapActions instance)
        {
            foreach (var item in m_Wrapper.m_HeroMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeroMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeroMapActions @HeroMap => new HeroMapActions(this);
    public interface IHeroMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTellSomething(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
